
---
title: Data production
format:
  html:
    embed-resources: true
---

```{r}
library(terra)
devtools::load_all("../model")

getwd()
```

```{r}
# Sets NA, NaN, Inf -> 0
na_to_zero <- function(raster) {
    return(ifel(is.na(raster), 0, raster))
}

get_feature_mappings <- function(config) {
    # Group by layer, results in {layer_name : layer_config}
    config_by_layer <- split(config, as.factor(config[["Dataset"]]))

    # Generate mapping {layer_name : {raster_value : feature_name}}
    mappings <- lapply(
        config_by_layer, function(layer_config) {
            setNames(layer_config[["Name"]], layer_config[["Raster_Val"]])
        }
    )
    return(mappings)
}
```

```{r}
config <- biodt.recreation::load_config()

feature_mappings <- get_feature_mappings(config)
print(length(feature_mappings))

one_hot_layer <- function(layer, feature_mappings) {
    layer_name <- names(layer)[1]
    feature_mapping <- feature_mappings[[layer_name]]
    sublayer_stack <- lapply(names(feature_mapping), function(i) {
        sublayer_i <- ifel(layer == as.numeric(i), 1, NA)
        names(sublayer_i) <- feature_mapping[i]
        return(sublayer_i)
    })
    result <- rast(sublayer_stack)
    return(result)
}

one_hot <- function(raster, feature_mappings) {
    return(sapp(raster, function(layer) one_hot_layer(layer, feature_mappings)))
}
```

```{r}
raw_data_dir <- "Raw_Data/"

raw_tiffs <- list.files(path = raw_data_dir, pattern = "\\.tif$", recursive = TRUE)


stopifnot(length(feature_mappings) == length(raw_tiffs))
```

## Properties of the original tiffs

```{r}
print(raw_tiffs[[1]])
bush <- vect("../Data/input/Raw_Shapefile/Bush/Bush.shp")
raster <- file.path(raw_data_dir, raw_tiffs[[21]]) |>
    rast() |>
    crop(bush)

unique(values(raster))
```

```r

properties <- lapply(raw_tiffs, function(tiff) {
  file_path <- file.path(raw_data_dir, tiff)
  raster <- rast(file_path)

  res <- c(
      name = basename(file_path),
      #file_size = file.info(file_path)$size,
      res = res(raster),
      ext = as.vector(ext(raster)),
      origin = origin(raster),
    )
  return(res)
})

properties_matrix <- do.call(rbind, properties)
properties_df <- as.data.frame(properties_matrix, stringsAsFactor = FALSE)

properties_df
```
