---
title: Generate test input data
format:
  html:
    embed-resources: true
---

```{r}
library(terra)
devtools::load_all("../model")
```
```{r}
# NOTE: map NaN to zero because the input data erroneously
# contains NaN. When I'm responsible for data generation DO NOT
# do this!
na_to_zero <- function(raster) {
  return(ifel(is.na(raster), 0, raster))
}
```


## Take original (contaminated) data and crop to Bush estate

```r
crop_area <- vect("../Data/input/Raw_Shapefile/Bush/Bush.shp")
data_dir <- "../Data/input/Processed_Data/"
output_dir <- "data/original"

slsra <- file.path(data_dir, "SLSRA.tif") |>
  rast() |>
  crop(crop_area) |>
  round() |>


plot(slsra)

writeRaster(slsra, filename = file.path(output_dir, "SLSRA.tif"), overwrite = TRUE)

fips_n <- file.path(data_dir, "FIPS_N.tif") |>
  rast() |>
  crop(crop_area) |>
  round()

writeRaster(fips_n, filename = file.path(output_dir, "FIPS_N.tif"), overwrite = TRUE)

plot(fips_n)

fips_n_slope <- file.path(data_dir, "FIPS_N_Slope.tif") |>
  rast() |>
  crop(crop_area)

writeRaster(fips_n_slope, filename = file.path(output_dir, "FIPS_N_Slope.tif"), overwrite = TRUE)

plot(fips_n_slope)

fips_i <- file.path(data_dir, "FIPS_I.tif") |>
  rast() |>
  crop(crop_area) |>
  round()

writeRaster(fips_i, filename = file.path(output_dir, "FIPS_I.tif"), overwrite = TRUE)

plot(fips_i)

water <- file.path(data_dir, "Water.tif") |>
  rast() |>
  crop(crop_area) |>
  round()

writeRaster(water, filename = file.path(output_dir, "Water.tif"), overwrite = TRUE)

plot(water)

rm(c(slsra, fips_n, fips_n_slope, fips_i, water))
```

## Convert to one-hot representation

```{r}
data_dir <- "data/original/"
output_dir <- "data/one_hot/"

config <- model::load_config("../model/config.csv")

get_feature_mappings <- function(config) {
  # Group by layer, results in {layer_name : layer_config}
  config_by_layer <- split(config, as.factor(config[["Dataset"]]))

  # Generate mapping {layer_name : {raster_value : feature_name}}
  mappings <- lapply(
    config_by_layer, function(layer_config) {
      setNames(layer_config[["Name"]], layer_config[["Raster_Val"]])
    }
  )
  return(mappings)
}

feature_mappings <- get_feature_mappings(config)
print(feature_mappings)

one_hot_layer <- function(layer, feature_mappings) {
    layer_name <- names(layer)[1]
    feature_mapping <- feature_mappings[[layer_name]]
    sublayer_stack <- lapply(names(feature_mapping), function(i) {
        sublayer_i <- ifel(layer == as.numeric(i), 1, NA)
        names(sublayer_i) <- feature_mapping[i]
        return(sublayer_i)
    })
    result <- rast(sublayer_stack)
    return(result)
}

one_hot <- function(raster, feature_mappings) {
    return(sapp(raster, function(layer) one_hot_layer(layer, feature_mappings)))
}

```

```{r}
slsra <- file.path(data_dir, "SLSRA.tif") |>
  rast() |>
  one_hot(feature_mappings) |>
  na_to_zero()

#print(names(slsra))

fips_n <- file.path(data_dir, "FIPS_N.tif") |>
  rast() |>
  one_hot(feature_mappings) |>
  na_to_zero()


# First need to quantise the slope values before one-hot encoding
# I do not know the origin of these intervals
slope_rcl <- data.matrix(data.frame(
        lower_bound = c(0, 1.72, 2.86, 5.71, 11.31, 16.7),
        upper_bound = c(1.72, 2.86, 5.71, 11.31, 16.7, Inf),
        mapped_to = c(1, 2, 3, 4, 5, 6)
))

fips_n_slope <- file.path(data_dir, "FIPS_N_Slope.tif") |>
  rast() |>
  classify(rcl = slope_rcl) |>
  one_hot(feature_mappings) |>
  na_to_zero()

#plot(fips_n_slope)

fips_n <- c(fips_n, fips_n_slope)

fips_i <- file.path(data_dir, "FIPS_I.tif") |>
  rast() |>
  one_hot(feature_mappings) |>
  distance() |>
  model::map_distance_to_unit_interval(alpha=0.01, kappa=5) |>
  na_to_zero()

water <- file.path(data_dir, "Water.tif") |>
  rast() |>
  one_hot(feature_mappings) |>
  distance() |>
  model::map_distance_to_unit_interval(alpha=0.01, kappa=5) |>
  na_to_zero() 


# NOTE: Should compress using LZW compression
# https://rdrr.io/cran/terra/man/writeRaster.html
writeRaster(slsra, filename = file.path(output_dir, "SLSRA.tif"), overwrite = TRUE)
writeRaster(fips_n, filename = file.path(output_dir, "FIPS_N.tif"), overwrite = TRUE)
writeRaster(fips_i, filename = file.path(output_dir, "FIPS_I.tif"), overwrite = TRUE)
writeRaster(water, filename = file.path(output_dir, "Water.tif"), overwrite = TRUE)


#plot(water)

x <- rast(file.path(output_dir, "SLSRA.tif"))
x

plot(x)

```
