# Stage 2 (One-hot encoded)

```{r include=FALSE}
library(dplyr)
library(terra)

devtools::load_all("../model")
source("production.R")

config <- load_config()
feature_mappings <- get_feature_mappings(config)

stage_1_files <- get_files("data/Stage_1")
stage_2_files <- get_files("data/Stage_2")

bush <- vect("data/Shapefiles/Bush/Bush.shp")
cairngorms <- vect("data/Legacy/Legacy_Data/input/Raw_Shapefile/CairngormNP/CairngormNP.shp")
stirlingshire <- vect("data/Legacy/Legacy_Data/input/Raw_Shapefile/Stirlingshire/Stirlingshire.shp")
scotland <- vect("data/Scotland/boundaries.shp")
```

## Test one-hot encoding with Landform

```{r}
layer_name <- "FIPS_N_Landform"

layer_in <- stage_1_files[[layer_name]] |> rast() |> crop(bush)
plot(layer_in)

feature_mapping <- feature_mappings[[layer_name]]
#print(feature_mapping)
```

One-hot encode, and check that the features match up to each other.

```{r}
one_hot_pixel <- function(x) {
    out <- matrix(0, nrow = length(x), ncol = length(feature_mapping))
    for (i in seq_along(feature_mapping)) {
        out[, i] <- ifelse(x == as.numeric(feature_mapping[i]), 1, 0)
    }
    return(out)
}

layer_out <- lapp(
    layer_in,
    fun = one_hot_pixel
    # datatype = "INT1U",
)
names(layer_out) <- names(feature_mapping)

plot(layer_out)

config |> filter(Dataset == layer_name) |> select(Name, Description, Raster_Val)
```

Note that `FIPS_N_Landform_16` is denoted by value `17` in the plot above, and so on and so forth.
It looks like 8, 9, 12, 14, 16 (values 9, 10, 13, 15, 17, excluding 2 which is lakes) are represented correctly.


## Test one-hot encoding with Roads and Tracks

```{r}
layer_name <- "FIPS_I_RoadsTracks"

layer_in <- stage_1_files[[layer_name]] |> rast() |> crop(bush)
plot(layer_in)

feature_mapping <- feature_mappings[[layer_name]]

layer_out <- lapp(
    layer_in,
    fun = one_hot_pixel
)
names(layer_out) <- names(feature_mapping)

plot(layer_out, col = c("grey", "red"))

config |> filter(Dataset == layer_name) |> select(Name, Description, Raster_Val)
```

Now we see the issue with mapping absence of the feature to 0.

```{r}

stage_2_files[[layer_name]] |> rast() |> crop(bush) |> plot(col = c("grey", "red"))
```

## Finding the bug

```{r}
test <- rast(stage_2_files[["FIPS_I_RoadsTracks"]]) |> crop(bush)
names(test)


test2 <- rast("data/Stage_3/FIPS_I.tif")
names(test2)
```

```{r}
test <- rast(stage_2_files[["Water_Rivers"]])
names(test)

test2 <- rast("data/Stage_3/Water.tif")
names(test2)

```

```{r}
test <- rast(stage_2_files[["FIPS_I_RoadsTracks"]]) |> crop(bush)
writeRaster(test, "test.tif", overwrite = TRUE)

names(test) <- c("a", "b", "c", "d", "e")

names(rast("test.tif"))

test2 <- rast("test.tif")
names(test2) <- c("a", "b", "c", "d", "e")
writeRaster(test2, "test2.tif", overwrite = TRUE)
names(rast("test2.tif"))

sources(test2)

data <- toMemory(test2)
sources(data)
```

```{r}
test <- rast(stage_1_files[["FIPS_I_RoadsTracks"]]) |> crop(bush)
feature_mapping <- feature_mappings[["FIPS_I_RoadsTracks"]]
smee <- lapp(
    test,
    fun = one_hot_pixel,
    filename = "smee.tif",
    overwrite = TRUE,
    wopt = list(
        names = names(feature_mapping),
        datatype = "INT1U"
    )
)
names(smee)
names(rast("smee.tif"))
```

## Properties of the Stage 2 data

```r

files[["FIPS_N_Landform"]] |>
    rast() |>
    subset(1) |>
    plot()

files[["FIPS_I_RoadsTracks"]] |>
    rast() |>
    crop(bush) |>
    plot()
```

```r
layers <- rast(files[["FIPS_I_RoadsTracks"]])
layers <- ifel(is.na(layers), 0, layers)

plot(crop(layers, bush))
```


## Properties of the processed tiffs

```r
processed_data_dir <- "Processed"

file_paths <- lapply(
    list.files(path = processed_data_dir, pattern = "\\.tif$", recursive = TRUE),
    function(file_) file.path(processed_data_dir, file_)
)
file_stems <- lapply(
    file_paths,
    function(path) tools::file_path_sans_ext(basename(path))
)
files <- setNames(file_paths, file_stems)

files
```

```r
files[[1]] |> rast() |> crop(aoi) |> plot()
```
