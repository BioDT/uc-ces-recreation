# Stage 0 (raw data)

```{r include=FALSE}
library(terra)
library(dplyr)

devtools::load_all("../model")
source("production.R")

config <- load_config()
feature_mappings <- get_feature_mappings(config)

bush <- vect("data/Shapefiles/Bush/Bush.shp")
cairngorms <- vect("data/Legacy/Legacy_Data/input/Raw_Shapefile/CairngormNP/CairngormNP.shp")
stirlingshire <- vect("data/Legacy/Legacy_Data/input/Raw_Shapefile/Stirlingshire/Stirlingshire.shp")
```

There are more files than feature mappings, but there are no feature mappings missing - good.

```{r}
files <- get_files("data/Stage_0")

# There are more files than feature mappings...
paste("Number of files:", length(files), "| Number of features:", length(feature_mappings))

# So check that the feature mappings are a subset
stopifnot(all(names(feature_mappings) %in% names(files)))
```

## Properties of the raw data

We see that the 21 layers have every-so-slightly different resolutions, extents and coordinate system origins.

```{r}
properties <- lapply(files, function(file_) {
    raster <- rast(file_)
    info <- c(
        # file_size = file.info(file_)$size,
        nlyr = nlyr(raster),
        res = res(raster),
        ext = as.vector(ext(raster)),
        origin = origin(raster)
    )
    return(info)
})
properties_df <- as.data.frame(
    do.call(rbind, properties), # creates matrixc
    stringsAsFactor = FALSE
)
properties_df
```

## Check that data is integer-valued

Check that all data except slopes are integer-valued, with values matching the feature mappings

```{r}
# Check all values are integers
for (layer in names(files)) {
    # Slope has non-integer values
    if (layer == "FIPS_N_Slope") next

    # NOTE: Too expensive - just do one!
    if (layer != "FIPS_N_Landform") next

    unique_vals <- files[[layer]] |>
        rast() |>
        # This is more suited to FIPS_N and SLSRA
        spatSample(size = 100, values = TRUE, na.rm = TRUE) |>
        # This is more suited to linear features: FIPS_I, Water
        # spatSample(size = 100, values = TRUE, na.rm = TRUE, ext = bush, exhaustive = TRUE) |>
        unique()

    not_mapped <- !sapply(unique_vals, function(val) val %in% feature_mappings[[layer]])

    if (any(not_mapped)) {
        print(paste0("The layer '", layer, "' contains value(s) '", unique_vals[not_mapped], "' which are not present in the feature mappings."))
    }
}
```

## Test reprojection

Note that we get the *wrong* result if we crop before reprojecting, since the shapefiles are in EPSG:27700.
So even for this quick test we need to reproject the whole scotland-wide raster before cropping.

```{r}
layer <- "FIPS_I_RoadsTracks"
reference <- rast(
    crs = "EPSG:27700",
    res = c(20, 20),
    ext = ext(-10000, 660000, 460000, 1220000) # xmin, xmax, ymin, ymax
)

# crop_then_proj <- files[[layer]] |>
# rast() |>
# crop(bush) |>
# project(reference, method = "near")

proj_then_crop <- files[[layer]] |>
    rast() |>
    project(reference, method = "near") |>
    crop(bush)

# plet(crop_then_proj, type="classes")
plet(proj_then_crop, type = "classes")
```


```{r}
config |>
    filter(Dataset == "FIPS_I_RoadsTracks") |>
    select(Name, Description, Raster_Val)
```
